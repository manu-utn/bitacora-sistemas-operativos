#+TITLE: Introducción al Sistema Operativo
* temas al aire
los distintos SO tienen en común
que tienen funcionalidades que están en el kernel
* [TODO] Evolución de los Sistemas Operativos
** Monoprogramados
*** Conceptos
    los programas dejaban de funcionar porque el procesador se quedaba esperando
*** Procesamiento en serie
    - Se podia ejecutar solo un programa a la vez
    - Eran las personas quienes que tenian que ejecutar esos otros programas
*** Sistemas en lotes sencillos
** Multiprogramados
*** Sistemas en lotes multiprogramados
    - Se automatizó el procesamiento en serie (???)
    - se podian ejecutar varios programas de manera *concurrente*
*** Sistemas de tiempo compartido
    - Es el utilizado actualmente
    - son sistemas de multiusuario donde varios usuarios conectados en 
* [DONE] Funciones
  CLOSED: [2021-08-30 lun 15:18]
** Administrar la ejecución de programas
   Se basa en el tema de *planificación de procesos/hilos*
** Interfaz para usuario y dispositivos
   - Ser interfáz de usuario (/a través de una consola de comandos, ó de una interfaz gráfica/)
   - Ser interfaz con los dispositivos
** Administración de los recursos de HW y SW
   - Cuando hacemos un programa (Ej. una calculadora), es este
     quien le solicita al *SO* que muestre por pantalla los resultados
   - es el *sistema operativo quien se encarga de administrar los 
     recursos de hardware*, evitandole al programador lidiar con problemas
     de hardware
** Comunicación entre programas
   - a través del *sistema operativo* para evitar que otros
     programas accedan a posiciones de memoria de otro
     para agregar/sacar información
    
     #+BEGIN_EXAMPLE
     Un ejemplo sería que un programa que aprovecha bugs del SO
     para ver los datos de otro, como ver el Homebanking
     #+END_EXAMPLE
** Protección y seguridad
   ej. similar al del homebanking
** Asignación de recursos
   El mismo SO es quien se encarga de asignarse los recursos
** Administrar los archivos
   - Entra el concepto de *filesystem*
** Administrar la memoria
   - Porque _todo lo que se ejecuta está en memoria_
   - A posterior se trata la _memoria física/virtual_
   - Es necesario porque la _memoria es limitada_ (/existen técnicas para administrarla/)
** Administrar los dispositivos de IO
* [DONE] Capas del Sistema Operativo
  CLOSED: [2021-08-30 lun 15:25]
** Aplicaciones de usuario
   |---------------------------------+-------------------|
   | Tipo de usuario                 | Que necesita usar |
   |                                 |                   |
   |---------------------------------+-------------------|
   | Usuarios Finales                | Aplicaciones      |
   |---------------------------------+-------------------|
   | Programadores                   | Utilidades        |
   |                                 | Sistema Operativo |
   |---------------------------------+-------------------|
   | Diseñador del Sistema Operativo | Hardware          |
   |---------------------------------+-------------------|

   - Los *usuarios finales* solo quieren usar las aplicaciones
** Aplicaciones Utilitarias
  - Son lo que los *programadores* que necesitan para poder programar
    (Ej. compilador, consola, interfaz grafica)
  - Para usarlos necesitamos conocer el *sistema operativo*
    (Ej. mac, linux, windows,.. cada uno su mundo)
** Bibliotecas del Sistema
** System Calls
   - Para tener un control instrucciones
   - Para manejar los pedidos de recursos de los procesos (/la manera correcta/)
   - Las provee el SO y usa al kernel como puente/nexo con el HW
** Kernel (Sistema operativo)
   - El SO concentra/encapsula la lógica en el su núcleo/Kernel, para proteger el HW
   - Es el _núcleo del SO_, es la base del SO
   - Es la que queremos proteger
   - Para diseñar un SO necesitamos conocer el hardware
** Hardware
* [DONE] (Syscall) Llamadas al sistema
  CLOSED: [2021-08-30 lun 16:03]
** Conceptos
   #+BEGIN_EXAMPLE
   Las llamadas al sistema son a nivel sistema operativo, 
   porque el printf() en Linux llama a write (llamada al sistema en linux)
   quiźas en Windows la llamada al sistema tiene otro nombre en vez de write
   #+END_EXAMPLE

  - Son la _manera correcta de solicitar los recursos_ (/Ej. pedir memoria/)
  - son más complejas de usar, los *wrappers* facilitan su uso
  - permite al programador utilizar recursos
  - suelen ser utilizadas a traves de una API por medio de wrappers
    - permiten portabilidad
      (es decir cuando llamamos a una funcion printf en cualquier 
      SO deberia hacer lo mismo, aunque por dentro cada SO haga 
      otra cosa, PERO siempre que usemos funciones estandar)
  - son a nivel *sistema operativo*  (no es lo mismo en Linux, Windows, ...)
** Salto de Modo
   La syscall hace el *cambio de modo* y a nivel de implementación se usa
   + *Interrupciones*
     1. dejar info que es una syscall
     2. lanzar la interrupción
   + *fast Syscalls*
     1. dejar info que es una syscall
     2. logica de la syscall -> ejecuta directo la syscall

   Manejo de interrupciones -> RAM -> Ejecuta Syscall
** Portabilidad de un programa
   La portabilidad de un programa consiste en poder pasar un 
   programa de un sistema operativo a otra, y que siga funcionando.
   Esto se logra con bibliotecas estandar

   *Observaciones:*
   Las llamadas en cada sistema operativo son diferentes
   por eso un programa compilado para Linux puede no funcionar en Windows,
   y viceversa.
* [DONE] Wrappers
  CLOSED: [2021-08-30 lun 16:04]
    - significa envoltorio
    - *Encapsula la complejidad* de una llamada a una ~syscall~ (/para hacer un pedido al SO/)
    - es una función que llama a otra función (que es una llamada al sistema)
    - son funciones que incluyen una *llamada al sistema*

  #+NAME: funcion-printf
  #+BEGIN_EXAMPLE
  la función printf(..) de C

  llama a otra función (que es una llamada al sistema, nombrada write)
  paa poder imprimir en pantalla

  al incluir una llamada al sistema, se lo considera un wrapper
  
  nos evita tener que pasarle al write el código del dispositivo 
  de la pantalla y la cantidad de caracteres a imprimir.
  Sólo le pasamos los caracteres y listo, él se encarga
  de imprimir en pantalla.
  #+END_EXAMPLE
   
  #+NAME: syscall-write
  #+BEGIN_EXAMPLE
  wite es una funcion del sistema
  que se puede utilizar para imprimir en cualquier dispositivo
  (Ej. suponiendo que sabemos el codigo del dispositivo de la pantalla) 

  write NO es una instruccion privilegiada
  #+END_EXAMPLE
* [DONE] Modo de ejecución
  CLOSED: [2021-08-30 lun 15:55]
** Conceptos
   |-------+-------------------|
   | Nivel | Modo de Ejecución |
   |-------+-------------------|
   |     0 | Modo Kernel       |
   |-------+-------------------|
   |     1 | Modo Usuario      |
   |-------+-------------------|

  + también llamados "anillos de protección"
    1. anillo - aplicaciones/usuario (/está más limitado/)
    2. anillo - device drivers
    3. anillo - kernel (/es el modo mas restrictivo/)
  + Es el ~PSW~ el que tenía el bit de *modo de ejecución*
  + Suelen ser 4 anillos de protección, pero sólo usamos 2 (kernel/usuario)
  + Garantiza la protección
  + según el modo podemos ejecutar o no ciertas *instrucciones* (privilegiadas y no privilegiadas)
  + el SO es el primero en bootear,
    - quien cambia a modo usuario todos los programas, 
    - es el unico que puede cambiar a [[Modo kernel]] y ejecutar [[instrucciones privilegiadas]]
  + La CPU no sabe quien está ejecutando, sólo conoce el *modo de ejecución*
    1. Si está en modo usuario => no va a dejar ejecutar instrucciones privilegadias
    2. Si está en modo kernel => le permite ejecutar instrucciones privilegiadas
** Modo kernel
  - se pueden ejecutar las *instrucciones privilegiadas*
  - solo el SO puede ejecutar en este modo, para poder acceder al hardware
** Modo usuario
   - se pueden ejecutar las *instrucciones NO privilegiadas*   
   - cuando ejecutamos una aplicación está en este modo
   - se pueden ejecutar ALGUNAS *instrucciones*
** Cambio de modo
*** Modo usuario a Modo Kernel
    Puede suceder por
    + Por atender una [[Interrupción]]
    + Por invocar una [[Syscall]] (/Ej. si un proceso pide memoria/)
*** Modo Kernel a Modo Usuario
    A través de 
    + Una [[instrucción privilegiada]] (otra que no sea privilegiada no podría, por estar en modo kernel)
    + Por *Restaurar el contexto* (/porque al cambiar los registros del CPU, además del PC también se pisa el PSW para cambiar el modo/)

    #+BEGIN_QUOTE
    Puede darse por *restaurar el contexto* porque cuando atendemos una *interrupción*
    se guarda el *CTX* (/los registros del CPU, tanto el PC, como el PSWD/)

    Al guardar también el *PSWD* se estaría pisando el *modo de ejecución* (/para pasar de modo kernel a modo usuario/)

    Dos casos en los que NO habría un *cambio de modo* sería
    1. Si ya se estaba atendiendo una *interrupción* => ya estaba en *modo kernel*
    2. Si ya se estaba ejecutando una *syscall* => ya estaba en *modo kernel*
    #+END_QUOTE
** [TODO] Otros conceptos que utiliza
*** Syscall
    - son llamadas al sistema (/la manera correcta de manejar los recursos pedidos por los procesos/)
*** [TODO] Interrupciones
    - la notificacion de un evento (ej. de una E/S)
    - el procesador se entera de esto y un modulo del SO se encarga de manejar esto

    #+BEGIN_COMMENT
    El CPU se entera, y el módulo que lo maneja es el *interrupt handler* ?
    #+END_COMMENT
** Ejemplos
*** Ejemplo 1 - Cambios de modo
    Ejemplo
    |----+-----------+---------------------------------------------+-----------+-----+---------------+-----|
    | K  | U         |                                             | k         | u   | k             | u   |
    |----+-----------+---------------------------------------------+-----------+-----+---------------+-----|
    | so | app       | 1. syscall                                  | so        | app | so            | app |
    |    |           | (Un programa llama a una syscall            |           |     |               |     |
    |    |           | para pedirle al SO)                         |           |     |               |     |
    |    | (notepad) | 2. interrupcion                             | (notepad) |     | (calculadora) |     |
    |    |           | (El SO toma el control del procesador,      |           |     |               |     |
    |    |           | detiene la ejecución del programa,          |           |     |               |     |
    |    |           | hace lo que le pidieron                     |           |     |               |     |
    |    |           | 3. el SO le devuelve el control al programa |           |     |               |     |
    |----+-----------+---------------------------------------------+-----------+-----+---------------+-----|

    - K: modo kernel
    - u: modo usuario
    - app: cualquier aplicación
*** Ejemplo 2
    #+BEGIN_EXAMPLE
    el scanf()
    1. parte de modo usuario
    
    2. pasa a modo kernel,
    una parte se ejecuta en modo kernel con llamado al sistema
    (la llamada READ) para pedir datos
 
    3. pasa a modo usuario
    #+END_EXAMPLE
*** Ejemplo 3
  #+BEGIN_EXAMPLE
  Cuando ejecutamos el scanf()
  1. Se ejecuta en modo usuario
  2. Hace una llamada al sistema (nombrada READ)
  3. El programa se deja de ejecutar, y se cambia al Modo Kernel, 
     donde el SO solicita al hardware (el teclado en este caso)
     cuando tiene la información se los envía al programa
  4. Se cambia al Modo Usuario y el programa ejecuta lo que recibió

  Recordar que solo el Sistema Operativo puede ejecutar en el modo kernel
  #+END_EXAMPLE
