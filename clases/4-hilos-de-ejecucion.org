#+TITLE: Clase 04 - Hilos y Procesos
* Repaso
** cpu-bound
   - procesos que requieren mucho cálculo
     (Ej. criptografía)
** io-bound
** planificadores
*** clasificación
**** largo plazo
**** mediano plazo
     - aparecen los estados suspendido
**** corto plazo
*** algoritmos
**** fifo
**** sjf
**** rr
**** vrr
     - favorece a los procesos que no pueden aprovechar todo el quantum
**** con colas multinivel
**** hnn
*** conceptos
**** aging
**** inanicion
     - un proceso de baja prioridad que nunca llega al cpu (a ejecutarse)
**** 
** ejercicio que dio
   1. se hace una syscall
   2. luego se atiende una interrupción
* Hilos de ejecución
** [WAITING] Conceptos
   - Son la *unidad básica de utilización de la CPU*
   - Tiene un espacio de pila, y registros <--------------
   - Tienen su propio *Stack* (guarda las variables locales, llamadas a funciones, y parámetros de las funciones)
   - Es administrado por un *TCB* (se encuentra en el *PCB* del proceso asociado)
   - NO necesitan un *mecanismo de comunicación* (por estar compartiendo recursos)
   - Los hilos de un mismo proceso comparten el mismo *espacio de direcciones*
   - Comparten con otros hilos
     1. código
     2. los datos
     3. los recursos

   *Obsevación:*
   El *TCB* es el *Thread Control Block* (Bloque de control del hilo)

   #+BEGIN_COMMENT
   en la ppt mencionaba que los hilos tienen un espacio de pila, 
   se refería al stack del so?

    *Respuesta:* supongo q si
   #+END_COMMENT
** Monohilo
** [DONE] Estructura de Hilos
   CLOSED: [2021-09-10 vie 20:17]
*** Conceptos 
    Cada *hilo de ejecución* tiene 
    + su propio Stack, Heap, PCB
    + su propio estado (/xq uno puede estar en estado Ejecutando, y otro en estado Bloqueado/En espera/)
    + comparten la parte *DATOS* de la imagen del proceso (/osea las variables globales/)
*** Ventajas
    - Al compartir recursos entre ellos
    - Pueden comunicarse sin usar mecanismos (IPC) *comunicación inter-proceso* del (SO)
*** Ejemplo
   #+name: proceso-sistema-multihilo
   |-------+--------+-------+-------|
   | PCB   | CODIGO | DATOS | HEAP  |
   |-------+--------+-------+-------|
   | TCB1  | TCB2   | ..    | TCBn  |
   | PILA1 | PILA2  | ..    | PILAn |
   |       |        |       |       |
   |       |        |       |       |
   |       |        |       |       |
   |-------+--------+-------+-------|

   cada columna es un hilo, y comparten *DATOS* (Variables globales)
   <<DUDA 1>> y comparten también codigo (?) 
** [DONE] Ventajas de hilos
   CLOSED: [2021-09-10 vie 20:19]
*** Menos Costoso
    Crear un hilo es _menos costoso que crear un proceso-hijo_ porque por cada proceso
    se debe guardar los datos en los PCB, y esto implíca más recursos.
*** Comunicación más rápida
    La comunicación entre hilos, es _más rápida que entre procesos_
    porque el (SO) *Sistema operativo* no tiene que intervenir (se evita el overhead)
*** Concurrentes
    Si se ejecutan de forma *concurrente* es que se van ir alternando el uso del CPU,
    a una velocidad tan alta que a la vista de usuario puede creer que
    se ejecutan al mismo tiempo/en paralelo/en simultáneo
*** Recursos compartidos
    Entre hilos comparten como recursos
     + Heap
     + Datos
     + Código
*** Multiprocesamiento/Paralelismo
    + Es cuando se tienen muchos Procesadores, teniendo uno ó varios Hilos de ejecución en cada Procesador
    + NO siempre se permite *Multiprocesamiento*
*** Procesamiento Asíncrono
    + Pueden ejecutar tareas diferentes
    (/Ej. que un hilo se conecte varias veces a un servidor, mientras el otro está esperando/)
    + Comunicación eficiente
      (/se pueden comunicar entre si, uno puede leer mientras otro modifica datos/)
*** Observaciones
    Los hilos _NO comparten como recursos_ el *Stack* ni *TCB*
    los únicos recursos que comparten son
     - heap
     - Datos
     - Codigo
     - pcb 
*** Ejemplos
    #+BEGIN_EXAMPLE
    Si un proceso usa varios procesadores,
    se podria asegurar la "seguridad" de los datos
    porque no se compartirian los recursos
   
    ej. si accedo en un mismo proceso (chrome con multiproceso)
    al homebanking y facebook,
    no podrian acceder a la informacion entre ellos
    #+END_EXAMPLE

    #+BEGIN_EXAMPLE
    Si un proceso usa varios hilos,
    se compartirian los datos entre ellos
    y podria poner en riesgo la seguridad

    Ej. Si accedo desde un mismo proceso (firefox con multihilos)
    al homebanking, y facebook
    uno podria acceder a la información de otro
    #+END_EXAMPLE
** [DONE] Desventajas
   CLOSED: [2021-09-10 vie 20:22]
*** Falta de Seguridad
    NO hay seguridad entre hilos (/porque se comparten los recursos/)
*** Un hilo afecta al resto
    Un problema en un hilo, puede afectar al resto

    #+BEGIN_EXAMPLE
    Si un hilo genera problemas de Memory-leak todo el proceso se ve afectado,
    por tanto también sus hilos

    Si uno de los hilos llama a una syscall mediante un wrapper para una I/O,
    entonces el proceso pasa a "Estado Bloqueado",
    quedando todos los hilos del proceso también bloqueados
    #+END_EXAMPLE
*** Recursos sin liberar
    - Cuando un hilo muere, NO se liberan los recursos automáticamente
      (/Ej. si un hilo reserva memoria, no se libera la memoria y muere,
       se produce *memory leak* xq se pierde la referencia al  hilo/)
    - Cuando un proceso muere
      + todos sus hilos también (El sistema operativo los toma)
      + NO se liberan automaticamente los recursos
        (es responsabilidad del programador, el SO no se entera cuales usamos)
** [TODO] Clasificación de Hilos
*** Hilos de Usuario (ULT - User Level Threads)
**** Conceptos
     - Cuando se crean es a nivel de usuario (modo usuario)
     - Cada (KLT) puede tener ó no, una *biblioteca de usuario* diferente para sus (ULTs)
     - NO los ve el *Sistema operativo*, se manejan mediante una *biblioteca de usuarios*
       * desarrollada por usuarios
       * se ejecuta en [[Modo Usuario]]
**** Ventajas
    + Portabilidad (/utilizar en cualquier Sistema operativo/)
    + Bajo [[overhead]] (/al no intervenir el Sistema Operativo/)
    + El cambio entre _ULTs del mismo KLT_ es más rápido (/porque no interviene el Sistema operativo/)
**** Desventajas
     - Una ~syscall bloqueante~ bloquea TODO el proceso

     #+BEGIN_QUOTE
     NO permite *multiprocesamiento* entre los (ULTs) suponiendo que hubiese multiples Procesadores.
     Porque se podría definir un tiempo para cada proceso que el (SO) conoce,
     pero como el (SO) a los (ULT) no los conoce.
     Sólo define el tiempo para el Proceso ó al (KLT) que los contiene,
     no pudiendo ejecutar los (ULT) en distintos procesadores..
     #+END_QUOTE
*** Hilos de Kernel (KLT - Kernel Level Threads)
**** Conceptos
    + Para crear un *KLT* se pasa de *modo usuario* a *modo kernel*
    + Es el (SO) *Sistema operativo* quien los crea y los conoce, por tanto _los puede Planificar_ (gestionar)
    + para el usuario es más fácil, porque se evita tener q buscar una biblioteca sin que falle
    + Se guarda una referencia del *TLB* en el *PCB* del proceso (/no es el caso de los ULT, porque no los gestiona el SO/)
**** Escenarios
***** Escenario 1 - Planificador con Quantum
      Si el planificador establece un *quantum* de 4 (q=4)
      se los va a asignar a los *hilos de kernel* (NO a los procesos que los contienen)
     
      porque el *sistema operativo* conoce a los *hilos de kernel*
      y los puede planificar (suponiendo que el sistema operativo soporta hilos de kernel)

      conclusión? El SO puede planificar *hilos de kernel* :)
**** Desventajas
     + El cambio entre KLTs es más lento (porque interviene el sistema operativo)
     + Mayor [[overhead]] (respecto de ULT)
       * cada cambio se lo solicita al (SO) *sistema operativo* (/haciendo cambios de modos/)
**** Ventajas
     + Una [[syscall bloqueante]] solo BLOQUEA ese hilo (/porque son independientes/)
     + permite *multiprocesamiento* de hilos del mismo proceso (/suponiendo que existen multiples procesadores/)
**** otros (linux)
     #+BEGIN_EXAMPLE
     Si un proceso tuviera varios *hilos d kernel*
     en el ~htop~ aparecerian varios agrupados
     (cada uno con su tid, compartirian ppid)

     en cambio si fuesen *hilos de usuario* 
     aparecería solo uno
     #+END_EXAMPLE
** [WAITING] Hilos Combinados (KLT y ULT)
*** KLT con ULTs
    Si el _KLT tiene contiene ULTs_
    + Es el SO quien ejecutará la **Biblioteca de Usuario* que entiende que 
       ULT debe ejecutar (lo hace en [[Modo Usuario]])
    + Se debe especificar que *Algoritmo de Planificación* utiliza
       la *Biblioteca de Usuario* para manejar sus hilos ULT
       (Ej. SFJ, FIFO/FCFS, RR, VRR, ...)
** [WAITING] E/S bloqueantes y ULT
   - Una ~syscall bloqueante~ bloquea TODO el proceso (y todos los ULTs que contenga)
** [WAITING] Planificación de ULTs
*** Conceptos
    Según como el *ULT* haya realizado la ~sycall~ de IO 
    dependerá que ULT elegirá la *biblioteca de usuario*
    que tenga el *KLT* (que contiene a los ULTs)
*** Directo desde el ULT
    Si el ULT hace llama a una ~syscall~ de IO sin ningún ~wrapper~
    osea llama directo al *sistema operativo*
    + el SO tomará el control y desalojará al KLT que contiene al ULT
    + la biblioteca de usuario
      * NO podrá *replanificar* antes de ser desalojado el KLT
        (ya que ante una interrupción, el SO debe atenderla)
      * guardará en el *(PC, [[Program Counter]])* como próxima instrucción,
        al último ULT que tenía ejecutando en el KLT
      * NO se enterará que fué desalojada
      * es posible que el *algoritmo de planificación* que tenía el KLT
        NO priorize como debería
*** Con un Wrapper de la Biblioteca
    - La ULT utiliza un *wrapper* en vez de una *syscall* al SO
    - Permite que el KLT pueda *replanificar* antes de ser *desalojado*
      por el SO
    - El *wrapper* agrega comportamiento extra, pudiendo tener una
      ~syscall bloqueante~ para terminar de *replanificar* con el 
      *algoritmo de planificación* que tuviese el KLT que contiene al ULT
*** Ejemplos de Interrupción con ULT en ejecución
**** Ejemplo 1
     Si un *hilo ULT* se estaba ejecutando y ocurre una *interrupción* (Ej. de IO ó Quantum)
     el SO debe atenderla y desalojar al *hilo KLT* que contiene al ULT

     la *biblioteca de usuario* NO se entera que fue desalojada
     y el *hilo KLT* guarda como próxima instrucción a ejecutar
     el que estaba ejecutando
     (apesar de que la *biblioteca de usuario* estaba usando como algoritmo 
      de planificación que iba a priorizar a otro hilo ULT quien debia ser el siguiente
      a ejecutarse porque tenía menor Ráfaga de CPU por ej. si fuese FSJ)
**** Ejemplo 2
     Supongamos que tenemos solo 1 dispositivo de IO, y solo 1 CPU
     donde el KLT-1 utiliza una *biblioteca de ULT* que planifica por *SFJ*
     y el SO utiliza el algoritmo *Round Robin* con Quantum=2

     En el instante t=2[ut] el SO desaloja al KLT-1 (que estaba ejecutando
     su hilo ULT-A) mediante una *interrupción de quantum*
     la *biblioteca ULT* del KLT-1 no se entera que fue desalojada
     y guardó como siguiente instrucción al ULT-A

     por tanto en el instante t=7[ut], cuando el KLT-1 puede reanudar el 
     uso de la CPU, seguirá ejecutando el ULT-A

     |-------+-------+-----+-----+-----+-----+----+-----+-----+-------+---|
     | KLT-1 | ULT-A | CPU | CPU |     | CPU |    | IO  |     | ~CPU~ |   |
     |       |       |     |     |     |     |    |     |     |       |   |
     |       | ULT-B |     |     |     |     |    |     |     |       |   |
     |-------+-------+-----+-----+-----+-----+----+-----+-----+-------+---|
     | KLT-2 |       |     |     | CPU | IO  | IO | CPU | CPU |       |   |
     |       |       |     |     |     |     |    |     |     |       |   |
     |-------+-------+-----+-----+-----+-----+----+-----+-----+-------+---|
     |       | 0     |   1 |   2 |   3 | 4   |  5 | 6   |   7 |     8 | 9 |
     |-------+-------+-----+-----+-----+-----+----+-----+-----+-------+---|
** [WAITING] Jacketing y ULTs Bloqueados
   + La traducción de *jacketing* es *revestimiento*
   + *La biblioteca de usuario utilizará E/S NO bloqueantes*
   + *Convierte una E/S bloqueante en una E/S NO bloqueante*
      (mediante un ~wrapper de biblioteca~ que le agrega comportamiento extra a una ~sycall~ que es bloqueante)
   + Mientras hayan ULTs para ejecutar el *KLT* que los contiene NO se bloqueará
   + Esto es sólo a nivel de hilos, el SO no se entera

   Con esto se previene que no se bloqueen el resto de los hilos

   #+BEGIN_COMMENT
   <<DUDA>>:
   El no-bloqueante tiene más *overhead* (???) no es al reves? ya que no interviene tanto el cpu?
   #+END_COMMENT
   
   *IMPORTANTE:*
   - en los ejercicios de la cátedra todas las ~syscall~ se hacen a través de *ULT* sin ~jacketing~
     (a menos que el enunciado diga lo contrario)

     
