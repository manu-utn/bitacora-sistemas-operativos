* Páginas de Man
  Es posible que algunas funciones que busquemos con el comando ~man~ en la terminal de linux
  nos encontremos con una explicación diferente a la que queriamos.
  Por eso dejo este apartado con las páginas que deberiamos elegir para ciertas funciones.

  1. Para ~fork()~ ejecutar ~man 2 fork~
* Signals - Señales
** Conceptos
   Cosas que un programa puede solicitar al kernel como acción cuando llegue una señal:
    + *Ignorar la señal.* Sin embargo hay dos señales que no pueden ser ignoradas: ~SIGKILL~ y ~SIGSTOP~.
    + *Capturar la señal.* El kernel llama una función dentro del programa cuando la señal ocurre.
** Tipos de Señales
   |---------+----------------------------------------------------------------------------------|
   | Señal   | Descripción                                                                      |
   |---------+----------------------------------------------------------------------------------|
   | SIGALRM | Generada cuando el timer asociado a la función alarm expira                      |
   |         |                                                                                  |
   |---------+----------------------------------------------------------------------------------|
   | SIGCHLD | Cuando un proceso termina o para, el proceso envía esta señal a su padre.        |
   |         | Por defecto esta señal es ignorada.                                              |
   |---------+----------------------------------------------------------------------------------|
   | SIGCONT | es enviada para reanudar un proceso que ha sido parado (suspendido) con SIGSTOP. |
   |         |                                                                                  |
   |---------+----------------------------------------------------------------------------------|
   | SIGINT  | generada con DELETE o Control-C                                                  |
   |---------+----------------------------------------------------------------------------------|
   | SIGKILL | Permite terminar un proceso.                                                     |
   |---------+----------------------------------------------------------------------------------|
   | SIGTSTP | generada cuando presionamos Control-Z. Puede ser ignorada.                       |
   |---------+----------------------------------------------------------------------------------|
   | SIGSTOP | similar a SIGTSTP pero no puede ser ignorada o capturada.                        |
   |---------+----------------------------------------------------------------------------------|

   *Observación:*
   La señal ~SIGCHLD~ normalmente el proceso padre invoca la función ~wait~ para obtener el estatus de término del proceso hijo.  
   Se evita así la creación de procesos "zombies".
** Comandos
*** Comandos Linux
   #+BEGIN_SRC shell :results output
     # listamos los tipos de señales
     trap -l

     # revisamos cual página del comando "man" necesitamos
     apropos signal

     # suponiendo elegimos la pag. 7
     man 7 signal
   #+END_SRC
*** Función kill
     La función ~kill~ envía una señal a un proceso o a un grupo de procesos. 
     se necesita de la biblioteca
     
    #+BEGIN_QUOTE
    int kill(pid_t pid, int signal);
   
    pid: id of destination process
    signal: the type of signal to send
    Return value: 0 if signal was sent successfully
    #+END_QUOTE
** Ejemplo 1 - Capturar Señales
   #+BEGIN_SRC C
     #include <stdio.h>
     #include <signal.h>

     // estas macros son solo de referencia
     //
     #define SIGHUP  1   /* Hangup the process */
     #define SIGINT  2   /* Interrupt the process */
     #define SIGQUIT 3   /* Quit the process */
     #define SIGILL  4   /* Illegal instruction. */
     #define SIGTRAP 5   /* Trace trap. */
     #define SIGABRT 6   /* Abort. */

     void handle_sigint(int sig){
       printf("Capturé la señal %d y.. ahora como saldrás..?:)\n", sig);
     }

     int main(){
       // capturamos el atajo de teclas CTRL+C que solemos usar
       // para interrumpir un proceso en ejecución
       signal(SIGINT, handle_sigint);

       // loop infinito
       while(1){
         sleep(1);
         // imprimimos cualquier mensaje para molestar
         printf("Tururu..\n");
       }

       return 0;
     }
   #+END_SRC
** Ejemplo 2 - Enviar señales a procesos hijos
   #+BEGIN_SRC C
     #include <stdio.h>
     #include <signal.h>
     #include <stdlib.h>
     #include <unistd.h>
     #include <sys/wait.h>
     #include <sys/types.h>

     // estas macros son solo de referencia
     //
     #define SIGHUP  1   /* Hangup the process */
     #define SIGINT  2   /* Interrupt the process */
     #define SIGQUIT 3   /* Quit the process */
     #define SIGILL  4   /* Illegal instruction. */
     #define SIGTRAP 5   /* Trace trap. */
     #define SIGABRT 6   /* Abort. */

     void sigint();

     int main(void){

         pid_t pid;

         pid = fork();

         if(pid < 0){
           perror("fork");
           return 1;
         }
         else if(pid == 0){ // proceso hijo
           // capturamos la señal, y reescribimos su comportamiento por otro
           signal(SIGINT, sigint);
           printf("Soy el proceso hijo (PID=%d)..!\n", getpid());

           // loop infinito
           // hasta recibir la señal de proceso padre
           for(;;)
             ; // sentencia nula
         }
         else{ // pid > 0
           sleep(3);
           printf("Proceso padre: envía señal SIGINT a PID=%d\n", pid);
           kill(pid, SIGINT);
         }
     }

     void sigint(){
       signal(SIGINT, sigint); // la reinicia/reestablece
       printf("Proceso hijo: Recibí una señal de SIGINT...");
     }
   #+END_SRC
** Referencias
   1. https://www.geeksforgeeks.org/signals-c-language/?ref=rp
   2. https://www.geeksforgeeks.org/signals-c-set-2/
   3. http://profesores.elo.utfsm.cl/~agv/elo330/2s09/lectures/signals.html
* Fork
** Ejemplo 1 - Proceso padre-hijo
   #+BEGIN_SRC C :results output
     #include <stdio.h>
     #include <sys/types.h>
     #include <unistd.h>

     int main(void){
       pid_t pid = fork();

       int numero = 1;

       printf("Hola..! ");
       // fork() retorna 0, cuando es un proceso hijo
       if(pid == 0){
         numero++;
         printf("Soy un proceso hijo\n");
         printf("> mi (PID) es %d \n", getpid());
         printf("> el (PID) de mi proceso padre es %d\n", getppid());
       }
       // fork() retorna un n > 0, cuando es el proceso padre
       else{ // pid > 0
         printf("Soy un proceso padre\n");
         printf("> mi (PID) es %d \n", getpid());
       }

       return 0;
     }
   #+END_SRC

   #+RESULTS:
   : Hola..! Soy un proceso padre
   : > mi (PID) es 29485 
   : Hola..! Soy un proceso hijo
   : > mi (PID) es 29486 
   : > el (PID) de mi proceso padre es 29485

** Ejemplo 2 - Procesos independientes
   Cada proceso es independiente y no puede modificar los datos del otro.

   Nuestro *proceso padre* va a incrementar ~numero~ en 1, imprimiendo 2
   mientras que el *proceso hijo* decrementará ~numero~ en 1, imprimiendo 0

   El *proceso padre* sabe saludar diciendo "Hola..!", y como el *proceso hijo*
   es una copia idéntica, también lo sabrá hacer...! :)

  #+BEGIN_SRC C :results output
    #include <stdio.h>
    #include <sys/types.h>
    #include <unistd.h>

    int main(void){
      pid_t pid = fork();

      int numero = 1;

      printf("Hola..! ");
      // fork() retorna 0, cuando es un proceso hijo
      if(pid == 0){
        printf("Soy un proceso hijo (pid=%d)\n", getpid());
        printf("Mi numero modificado es %d\n", --numero);
      }
      // fork() retorna un n > 0, cuando es el proceso padre
      else if(pid > 0){
        printf("Soy un proceso padre (pid=%d)\n", getpid());
        printf("Mi numero modificado es %d\n", ++numero);
      }
      // fork() retorna n<0 en caso de error
      else{
      }

      printf("------------------------\n");

      return 0;
    }
  #+END_SRC

  #+RESULTS: probando.c
  : Hola..! Soy un proceso padre (pid=24549)
  : Mi numero modificado es 2
  : ------------------------
  : Hola..! Soy un proceso hijo (pid=0)
  : Mi numero modificado es 0
  : ------------------------
** Ejemplo 3 - Proceso zombie
   Un proceso que crea un *proceso hijo*, y este finaliza antes que él
   se considera un *proceso zombie*

   También se puede utilizar un *wrapper* que invoque la *syscall* ~exit~
   para finalizar el proceso hijo

   #+BEGIN_SRC C :results output
     #include <stdio.h>
     #include <stdlib.h>
     #include <unistd.h>
     #include <sys/types.h>

     int main(void){
       pid_t pid;

       pid = fork();

       if(pid == 0){
         printf("Proceso hijo: Hola, soy un proceso hijo :)\n\n");
         sleep(5);
         printf("El proceso hijo se cansó y finalizó...\n\n");

         // otra manera sería usando un wrapper a la syscall (exit)
         exit(0);
       }
       else{ // pid > 0
         printf("Proceso padre: Hola, soy un proceso padre :)\n");
         sleep(10);

         printf("Proceso padre: y mi proceso hijo? soy un proceso zombie? T_T\n");
         printf("el proceso padre se aburrió y finalizó...\n");
       }

       return 0;
     }
   #+END_SRC
** Ejemplo 4 - Proceso huerfano
   Un proceso se considera *proceso huerfano* cuando su *proceso padre*
   finaliza antes que él.
   
   #+BEGIN_SRC C :results output
     #include <stdio.h>
     #include <stdlib.h>
     #include <unistd.h>
     #include <sys/types.h>

     int main(void){
       pid_t pid;

       pid = fork();

       if(pid == 0){
         sleep(10);
         printf("Proceso hijo: y mi proceso padre??? soy un proceso huerfano? :(\n");
       }
       else{ // pid > 0
         printf("Proceso padre: Hola, soy un proceso padre, estoy cansado, chau! \n");
         printf("el proceso padre finalizó...\n");
       }

       return 0;
     }
   #+END_SRC

   #+RESULTS:
   : Proceso padre: Hola, soy un proceso padre, estoy cansado, chau! 
   : el proceso padre finalizó...
   : Proceso hijo: y mi proceso padre??? soy un proceso huerfano? :(

* Referencias
  1. https://www.geeksforgeeks.org/zombie-processes-prevention
