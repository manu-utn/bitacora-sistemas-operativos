* Parciales 2019
** D TM
*** Enunciado
*** Solución
   #+BEGIN_SRC C
     m_caja = 1 // mutex (para recurso compartido)

     // (2) semaforos contadores
     cajas_disponibles = 400, productos_en_caja = 20
     etiquetado_disponible = 4

     // semaforo binario (controla prioridad de ejecución)
     productos_en_caja_ok = 0

     // (3) vectores de semaforos
     pedido_etiquetado[4] = [0,0,0,0]
     etiquetado_ok[4] = [0,0,0,0]
     // vector de semaforos contadores, no es necesario validar si superan el valor 80
     despachado[5] = [0,0,0,0, 0]

     // Almacen (N instancias)
     while(1) {
       // - verificamos que hayan cajas para cargar los productos
       // - chequeamos que su valor sea 0 < x < 400, si no, bloqueamos
       wait(cajas_disponibles)
       producto = tomar_producto()

       // - evaluamos que haya capacidad en la caja
       // - verificamos que su valor sea 0 < x < 20, si no, bloqueamos
       wait(productos_en_caja)

       // protejemos el recurso compartido entre almacen y distribucion
       wait(m_caja)
       depositar(producto, caja) // recurso compartido, protejido por mutex
       signal(m_caja)

       // - concepto de proceso productor-consumidor
       // - usamos un "semáforo binario" para controlar el orden de ejecución
       // - este seria el "proceso productor" avisando al "poceso consumidor"
       // que ya terminó su tarea
       // (en este caso, este cargan los productos en las cajas)
       signal(productos_en_caja_ok)
     }

     // Distribucion (M Instancias)
     while(1) {
       // - concepto de proceso productor-consumidor
       // - usamos un "semáforo binario" para controlar el orden de ejecución
       // - este sería "proceso consumidor", aguarda que el "proceso productor" termine
       // (en este caso, este retira los productos de las cajas)
       wait(productos_en_caja_ok)

       // protejemos el recurso compartido entre almacen y distribucion
       wait(m_caja)
       producto = retirar(caja) // recurso compartido
       wait(m_caja)

       // avisamos que terminamos de retirar los productos
       signal(productos_en_caja_ok)

       wait(etiquetado_disponible)           // lo solicito por si alguno está etiquetando
       posicionarse_etiquetado(id_etiq())

       signal(pedido_etiquetado[id_etiq()])  // solicito que algun robot lo etiquete
       wait(etiquetado_ok[id_etiq()])        // aguardo respuesta de confirmacion

       despachar(producto, producto.destino)  // luego que esté etiquetado, despacho
       signal(despachado[producto.destino])   // notifico que se despachó
     }

     // Etiquetado (4 instancias)
     while(1) {
       // como todos los semaforos del vector están inicializados en cero
       // se quedará esperando que alguien lo active con un signal()
       wait(pedido_etiquetado[get_id()]) // aguardo que alguien me solicite etiquetar
       etiquetar()

       signal(etiquetado_ok[get_id()]) // notifico que terminé de etiquetar
       signal(etiquetado_disponible) // libero recurso, para que otro siga
     }

     // Avión (5 instancias)

     // - aguardamos que todos los productos a destino estén despachados
     // - el segundo parámetro indica el valor que debe tener el semáforo contador
     // acumulado para que luego ejecute despegar()
     wait(despachado[producto.destino], 80)
     despegar()
   #+END_SRC
** TM
*** Enunciado
    Peter suele ir al Super a hacer las compras. Al llegar, lo primero que hace es buscar un canasto para sus
    productos. Si hay uno disponible comenzará a usarlo, en caso contrario, deberá esperar hasta que otro
    cliente se retire y devuelva el suyo. El Super cuenta con un máximo de 20 canastos.
   
    Una vez que agarra todos sus productos se dirige a la zona de los cajeros. Dentro del Super hay dos cajeros
    que atienden en simultáneo a los clientes siempre que haya alguien esperando para ser atendido. La
    atención de un cliente consiste en pasar los productos por la lectora de códigos, luego entregar el ticket y
    finalmente procesar el pago. Si el monto en su caja supera un valor, el cajero llevará la plata hasta la caja
    fuerte (compartida por ambos)
   
    Teniendo en cuenta el pseudocódigo presentado, sincronice únicamente con semáforos
   
    *NOTAS:*
    - La función recibir_llamado_cajero() devuelve 0 o 1 dependiendo del cajero que realizó el llamado al cliente.
    - El proceso “Cajero” cuenta con la función get_id() que devuelve 0 o 1 dependiendo del número de cajero.
 - 
    #+BEGIN_SRC C
      // Cliente (N instancias)
      dirigirse_al_super()
      agarrar_canasto()
      cargar_canasto()
      esperar_en_cola()
      id_cajero = recibir_llamado_cajero()
      entregar_productos()
      recibir_ticket()
      pagar()

      // Cajero (2 instancias)
      while(1){
        llamar_cliente()
        pasar_productos_por_lectora()
        entregar_ticket()
        saldo_actual += recibir_dinero()

        if(saldo_actual > 10000){
          depositar_en_caja_fuerte(saldo_actual)
        }
      }
    #+END_SRC
*** Solución
    #+BEGIN_SRC C
      // (1) semaforo contador 
      // (necesario para limitar la cant. de instancias, es decir de procesos que se ejecutan concurrentemente
      //  para utilizar los recursos, y compiten por usar el CPU)
      CANASTOS_DISPONIBLES = 20

      // (2) semaforos binarios (útil cuando interviene el problema de procesos productor-consumidor)
      solicitar_atencion = 0
      confirmar_atencion = 0

      // (3) vectores de semaforos binarios (manejan orden de ejecución entre procesos)
      productos_entregados[2] = [0, 0]
      ticket_entregado[2] = [0,0]
      pago_realizado[2] = [0, 0]

      // (1) semaforo mutex (proteje recurso compartido)
      m_saldo = 1

      /*************************************************************/

      // Cliente (N instancias)
      dirigirse_al_super()

      // - por cada llamado se decrementa en 1 el "semáforo contador"
      // - si x == 0, se bloquea (esperando que hayan canastos)
      wait(CANASTOS_DISPONIBLES)
      agarrar_canasto()
      cargar_canasto()

      esperar_en_cola()
      // - incrementa el "semaforo binario" en 1
      // - desbloquea a un proceso que esté esperando con wait(solicitar_atencion)
      signal(solicitar_atencion)
      // - está bloqueado, esperando que otro proceso lo habilite
      // porque el valor de este "semaforo binario" está inicializado en 0
      wait(confirmar_atencion)

      id_cajero = recibir_llamado_cajero()

      entregar_productos()
      // - incrementamos en 1 uno de los "semáforos binarios" (porque están inicializados en 0)
      // - desbloquea a otro proceso que esté esperando con wait(productos_entregados[id_cajero])
      signal(productos_entregados[id_cajero])

      // - se bloquea el proceso esperando que algun otro lo habilite al "semaforo binario" del vector
      wait(ticket_entregado[id_cajero])
      recibir_ticket()

      pagar()
      // - incrementa en 1 el "semáforo binario" del vector
      // - desbloquea a otro proceso que estaba esperando que este semáforo cambiase a 1 (esperaba con wait)
      signal(pago_realizado[id_cajero])
      // - liberamos el recurso (porque estamos limitando la cant. de instancias)
      // - cuando cada proceso cliente hizo wait(CANASTOS_DISPONIBLES) se decrementó en 1 este "semáforo contador"
      // diciendo que ese proceso lo estaba utilizando
      // - cuando el valor del semáforo llegase a 0, los procesos que lo soliciten con wait() se quedarán
      // bloqueados hasta que otro lo libere con signal()
      signal(CANASTOS_DISPONIBLES)

      /*************************************************************/

      // Cajero (2 instancias)
      while(1){
        wait(solicitar_atencion)

        llamar_cliente()
        signal(confirmar_atencion)

        wait(productos_entregados[get_id()])
        pasar_productos_por_lectora()

        entregar_ticket()
        signal(ticket_entregado[get_id()])

        wait(pago_realizado[get_id()])

        wait(m_saldo)
        saldo_actual += recibir_dinero()
        signal(m_saldo)

        if(saldo_actual > 10000){
          wait(m_saldo)
          depositar_en_caja_fuerte(saldo_actual)
          signal(m_saldo)
        }
      }
    #+END_SRC
** TT
*** Enunciado
    Peter quiere tomarse unos buenos mates. Para ello, saca yerba de un frasco de la cocina, la coloca
    en su despolvillador homologado, y luego de agitarlo sirve la yerba limpia en el mate.
    Otros compañer@s toman, cada uno con su propio mate, pero todos comparten el despolvillador.
    Dado que Peter usa yerba premium, tiene su propio frasco, mientras que el resto comparte otro. Si
    los frascos de la cocina se vacían, alguien los llena (siempre ambos a la vez). Mientras los frascos
    están vacíos nadie debería tomarlos, y cada frasco rinde 20 recargas. Los frascos empiezan llenos
   
    Teniendo en cuenta el pseudocódigo presentado, sincronice utilizando únicamente con semáforos.

    #+BEGIN_SRC C
      // Peter (1 instancia)
      while (TRUE) {
        yerba = tomarDe(frascoPremium);
        yerbaLimpia = usar(despol, yerba);
        mate = cargarCon(yerbaLimpia);
        disfrutarUnosVerdes(mate);
       }

      /******************************************/

      // Llenador (1 instancia)
      while (TRUE) {
        llenar(frascoPremium);
        llenar(frasco);
       }

      /******************************************/

      //Compañer@ matero (N instancias)
      while (TRUE) {
        yerba = tomarDe(frasco);
        yerbaLimpia = usar(despol, yerba);
        mate = cargarCon(yerbaLimpia);
        saborearUnosVerdes(mate);
      }
    #+END_SRC
*** Solución
    #+BEGIN_SRC C
      // (2) Semaforos tipo "mutex"
      m_despolvillador = 1
      m_frasco = 1
      // (2) Semáforos tipo "Contador"
      frasco_premium_cargas_disponibles = frasco_cargas_disponibles = 20
      // estos otros dos inician en 0
      // (porque el proceso peter, y compañero los incrementaran)
      frasco_premium_vacio = frasco_vacio = 0

      /******************************************/

      // Peter (1 instancia)
      while (TRUE) {
        // - por cada iteración, decrementa en 1 el "semaforo contador"
        // - evalua que el valor del semáforo no sea < 0, de ser asi, se bloquea el proceso
        wait(frasco_premium_cargas_disponibles)

        yerba = tomarDe(frascoPremium);

        // - incrementa en 1 el "semáforo contador"
        // (el proceso "Llenador", esperará unos 20 de estos para desbloquearse y llenarlo)
        signal(frasco_premium_vacio)

        // - protegemos el recurso compartido entre "peter" y "compañeros"
        wait(m_despolvillador)
          yerbaLimpia = usar(despol, yerba); // recurso compartido
        signal(m_despolvillador)

        mate = cargarCon(yerbaLimpia);
        disfrutarUnosVerdes(mate);
       }

      /******************************************/

      // Llenador (1 instancia)
      while (TRUE) {
        // para desbloquearse espera que ambos "semáforos contadores" tengan un valor de 20
        // (y los deja con valor cero, porque los wait decrementan)
        // - el proceso "peter" incrementaba el premium
        // - el proceso "compañeros" incrementaba el otro
        wait(frasco_premium_vacio, 20)
        wait(frasco_vacio, 20)

        // cuando los dos "wait" se desbloquearon
        // ejecuta lo que sigue
        llenar(frascoPremium);
        llenar(frasco);

        // hará un loop de 20 iteraciones para ambos semáforos contadores
        // porque el signal incrementa en 1, y.. tener 20 signal no es muy expresivo.. (?)
        signal(frasco_cargas_disponibles, 20)
        signal(frasco_premium_cargas_disponibles, 20)
       }

      /******************************************/

      //Compañer@ matero (N instancias)
      // - se repite lo mismo que con peter
      // - la única diferencia es que se agrega un mutex para el frasco,
      // porque es un recurso compartido entre las N instancias de compañeros
      while (TRUE) {
        wait(frasco_premium_cargas_disponibles)

        wait(m_frasco)
          yerba = tomarDe(frasco); // recurso compartido (entre compañeros)
        signal(m_frasco)

        signal(frasco_vacio)

        wait(m_despolvillador)
          yerbaLimpia = usar(despol, yerba); // recurso compartido (con peter)
        signal(m_despolvillador)

        mate = cargarCon(yerbaLimpia);
        saborearUnosVerdes(mate);
      }
    #+END_SRC
* Parciales 2018
** TM
*** Enunciado
    En estudio profundo del lenguaje español, un conjunto de científicos decide modelar 
    con procesos la generación de una palabra del diccionario: “ALABAR”

    |-----------+-----------+-----------+-----------|
    | Proceso 1 | Proceso 2 | Proceso 3 | Proceso 4 |
    |-----------+-----------+-----------+-----------|
    | print(R)  | print(B)  | print(A)  | print(L)  |
    |-----------+-----------+-----------+-----------|
*** Solución 1
    Encontramos como patrón que la palabra se forma con la letra A
    seguida de L ó B ó R en ese orden, y se repite 3 veces
   
    #+BEGIN_SRC C
      s_AL = 1
      A_OK = s_AB = s_AR = 0

      // Proceso (1)
      wait(s_AR)
      signal(A_OK)
      print(R)

      // Proceso (2)
      wait(s_AB)
      signal(A_OK)
      print(B)
      signal(s_AR)

      // Proceso (3)
      wait(A_OK)
      print(A)

      // Proceso (4)
      wait(s_AL)
      signal(A_OK)
      print(L)
      signal(s_AB)
    #+END_SRC
*** Solución 2
    #+BEGIN_SRC C
      s_A = s_L = 1
      s_B = s_R = s_LBR = 0

      // Proceso (1)
      wait(s_R)
      wait(s_LBR)
        print(R)

      // Proceso (2)
      wait(s_B)
      wait(s_LBR)
        print(B)
      signal(s_A)
      signal(s_R)

      // Proceso (3)
      wait(s_A)
        print(A)
      signal(s_LBR)

      // Proceso (4)
      wait(s_L)
      wait(s_LBR)
        print(L)
      signal(s_A)
      signal(s_B)
    #+END_SRC
** TT
*** Enunciado (A)
    Un conjunto de científicos decide modelar la melodía de una canción perteneciente a una popular
    banda de rock argentino, con el objetivo de entender la magnitud de su calidad musical.
    Para ello, desarrollan un proceso que consta de cuatro hilos, donde cada uno toca una nota de dicha
    melodía (a veces repetidas veces) simulando el sonido de un saxo.
    La melodía que se pretende modelar es: RE#, RE#, RE#, RE#, DO#, DO#, SOL, SOL#

    #+BEGIN_SRC C
      // Saxo Tenor
      while(true){
        tocar(DO#)
        tocar(DO#)
      }

      //  Saxo Alto
      while(true){
        tocar(RE#)
      }

      // Saxo Soprano
      while(true){
        tocar(SOL)
      }

      // Saxo Sopranino
      while(true){
        tocar(SOL#)
      }
    #+END_SRC
*** Enunciado (B)
    Si se desea poder tener un número indefinido de procesos (cada uno con sus cuatro hilos) que
    toquen concurrentemente la melodía, pero limitando cuántos de ellos pueden realizarla al mismo
    tiempo ¿Cuáles cambios realizaría al punto anterior?
    Asuma que inicialmente solo se desea que hasta 3 procesos toquen la melodía, pero se pretende que
    ese número pueda incrementarse/decrementarse mediante un proceso extra.
*** Solución (A)
    #+BEGIN_SRC C
      // (2) Semáforos tipo "contador"
      // 1. este inicia en 0, lo incrementará el proceso "saxo alto"
      s_TENOR = 0
      // 2. este otro inicia en 4, lo decrementará "saxo alto"
      s_ALTO  = 4

      // (2) Semáforos tipo "binarios"
      // - para controlar el orden de ejecución entre procesos
      s_SOPRANO = s_SOPRANINO = 0

      // Saxo Tenor
      while(true){
        // - El proceso queda bloqueado hasta que el semáforo valga 4
        // (el proceso "saxo alto" lo incrementará en 1 en cada iteración)
        wait(s_TENOR, 4)

        tocar(DO#)
        tocar(DO#)

        // - incrementa en 1 al semáforo binario
        // - desbloquea al proceso que esté haciendo wait(s_SOPRANO)
        signal(s_SOPRANO)
      }

      //  Saxo Alto
      while(true){
        // - por cada iteración del while(1) decrementará en 1 al semáforo contador
        // - al estar inicializado en 4, y ser el unico con valor > 0, es el primero
        // en iniciar
        wait(s_ALTO)
        tocar(RE#)

        // - por cada iteración del while(1) incrementará en 1 al semáforo contador
        signal(s_TENOR)
      }

      // Saxo Soprano
      while(true){
        // - semáforo "binario" inicializado en 0, el proceso queda bloqueado hasta que otro
        // haga un signal(s_SOPRANO) y lo habilite
        wait(s_SOPRANO)
        tocar(SOL)

        // - incrementa en 1 al semáforo binario, que estaba inicialiado en 0
        // - desbloquea al proceso que hacia wait(s_SOPRIANO)
        signal(s_SOPRANINO)
      }

      // Saxo Sopranino
      while(true){
        wait(s_SOPRANINO)
        tocar(SOL#)

        // - hace un loop de 4 iteraciones de signal(s_TENOR), haciendo que el
        // el semaforo contador vuelva al valor 4
        // - hará que proceso "Saxo Alto" vuelva a iniciar, y se repite el ciclo
        signal(s_ALTO, 4)
      }
    #+END_SRC
*** Solución (B)
    Haria un vector de semáforos contadores con longitud N, estando
    N inicializado en 3 (la cant. de procesos que indica inicialmente)

    inicializando cada semáforo con el valor que indique la cant. 
    de instancias de acceso que se desea limitar


