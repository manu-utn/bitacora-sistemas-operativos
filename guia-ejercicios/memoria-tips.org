#+TITLE: Memoria Tips
* Conceptos Básicos
** Referencias
   1. https://www.rapidtables.com/convert/number/hex-to-decimal.html
   2. http://cv.uoc.edu/UOC/a/moduls/90/90_574b/web/main/m1/c1/4.html

   #+BEGIN_COMMENT
   pendientes a revisar si dejar
   1. http://ryan.gulix.cl/dw/miscelaneos/notacion_de_bytes
   2. https://es.stackoverflow.com/questions/175436/por-qu%C3%A9-2-elevado-a-n-el-resultado-est%C3%A1-en-bytes
   #+END_COMMENT
** Tips
*** Diferenciar bits de un hexadecimal
   Si nos dan el hexadecimal ~0BEEFh~ para representarlo el *binario*...
   recordemos que cada valor *hexadecimal* equivale a ~4 bits~,
   que en binario podría ser cualquiera de estos valores.. 0000, 0001, 1000, etc..

   La ~h~ sólo hace referencia a que la expresión dada, es *hexadecimal*

   ~0BEEFh~ equivale a ~0000 1011 1110 1110 1111~ en binario

   - B (hexadecimal) = 11 (decimal) = 2^3*1 + 2^2*0 + 2^1 + 2^0 (potencias de 2) = 1011 (binario) = 4 bits
   - F (hexadecimal) = 15 (decimal) = 2^3*1 + 2^2*1 + 2^1*1 + 2^0*1 (potencias de 2) = 1111 (binario) = 4 bits

   |-------------+--------+------------+--------------+--------+--------------|
   | Decimal     |        | 11=8+0+2+1 | 14 (8+4+2+0) |     14 | 15 (8+4+2+1) |
   |-------------+--------+------------+--------------+--------+--------------|
   | Hexadecimal |      0 | B          | E            |      E | F            |
   |-------------+--------+------------+--------------+--------+--------------|
   | Binario     |   0000 | 1011       | 1110         |   1110 | 1111         |
   |-------------+--------+------------+--------------+--------+--------------|
   |             | 4 bits | 4 bits     | 4 bits       | 4 bits | 4 bits       |
   |-------------+--------+------------+--------------+--------+--------------|

   Retomando el ejemplo anterior
   - Si nos piden los primeros 4 bits del hexadecimal sería ~0~
   - Si nos piden los primeros 2 bits serían ~00~
   - Si nos piden los ultimos 16 bits en binario serían ~1011 1110 1110 1111~ (nos salteamos el ~0000~)
   - Si nos piden los últimos 16 bits en hexadecimal ~BEEF~
*** Bits de relleno al comienzo
    Si tenemos el hexadecimal ~0BEEFh~ y sabemos que en binario 
    equivale a ~0000 1011 1110 1110 1111~
    
    Podes obviar/ignorar los primeros 4 bits ~0000~ porque son de relleno

    *IMPORTANTE...!:*
    Si ese ~0000~ estuviese al final, NO PODEMOS IGNORARLOS. porque nos daría
    otro valor en binario...

    Ej.:
    ~0001~ equivale al ~1~ en hexadecimal, el ~0011~ al ~3~, el ~1100~ al ~C~
    En el ~0011~ podemos ignorar los primeros ceros,
    En el ~1100~ NO PODEMOS IGNORAR los ultimos ceros
** Unidades Básicas
*** Bit (b)
    - Representa la _unidad básica de almacenamiento_ de información digital
    - 8 bits representa 1 Bytes
    - Se representa con la *b* (minúscula)
*** Byte (B)
    - Representa a una _unidad de memoria direccionable_
    - 8 bits representa 1 Bytes
    - Se representa con la *B* (mayuscula)
    - Rangos
      - En binario entre 00000000 y 11111111
      - En decimal entre 0 y 255
      - En hexdecimal entre 00 y FF
*** Kibibyte (KiB)
    - Representa a _una unidad que es multiplo del byte_ y equivale a 2^10
** Bits de Mayor y Menor Peso
   + (MSB): El bit *mayor significativo* se lo conoce como *el de mayor peso* (ó valor)
   + (LSB): El bit *menos significativo* es conocido por *el de menor peso* (ó valor)
   
   #+BEGIN_QUOTE
   En un *byte* el *bit* de mayor peso es el que está en la posición 7
   y el de menor peso el de la posición 0
   #+END_QUOTE

   |-------+-----+-----+-----+-----+-----+-----+-------|
   | 1     |   0 |   1 |   0 |   0 |   1 |   0 | 1     |
   |-------+-----+-----+-----+-----+-----+-----+-------|
   | bit   | bit | bit | bit | bit | bit | bit | bit   |
   | ~MSB~ |     |     |     |     |     |     | ~LSB~ |
   |-------+-----+-----+-----+-----+-----+-----+-------|
** Tablas de Conversiones
   La potencia 2^N ese N representa la cant. de ~bits~ es decir 2^(N bits)

   |---------+---------+------------|
   | (B)ytes | (b)its  | en binario |
   |---------+---------+------------|
   | 1 Byte  | 8 bits  |            |
   | 2 Bytes | 16 bits |            |
   |---------+---------+------------|

   |-------+---------+----------------------------------------------------------------------------|
   | KiB   | bits    | bytes                                                                      |
   |-------+---------+----------------------------------------------------------------------------|
   | 1 Kib | 10 bits | 2^10 = 1024 bytes (1024 combinaciones para representar valores diferentes) |
   |-------+---------+----------------------------------------------------------------------------|

   #+name: hexadecimal-binario
   |--------------+-----------+-------------+-----------------------------|
   |  Hexadecimal |   Decimal |     Binario |                             |
   | (en base 16) | (base 10) | (en base 2) |                             |
   |--------------+-----------+-------------+-----------------------------|
   |            1 |         1 |        0001 | 2^0                         |
   |            2 |         2 |        0010 | 2^1 + 2^0                   |
   |            3 |         3 |        0011 | 2^1 + 2^0                   |
   |            4 |         4 |        0100 | 2^2 + 0*2^1 + 0*2^0         |
   |            5 |         5 |        0101 | 2^2 + 0*2^1 + 2^0           |
   |            6 |         6 |        0110 | 2^2 + 2^1   + 0*2^0         |
   |            7 |         7 |        0111 |                             |
   |            8 |         8 |        1000 | 2^3 + 0*2^2 + 0*2^1 + 0*2^0 |
   |            9 |         9 |        1001 |                             |
   |            A |        10 |        1010 |                             |
   |            B |        11 |        1011 |                             |
   |            C |        12 |        1100 |                             |
   |            D |        13 |        1101 |                             |
   |            E |        14 |        1110 |                             |
   |            F |        15 |        1111 |                             |
   |--------------+-----------+-------------+-----------------------------|
   |              |           |             |                             |
** Ejemplos de Conversión
*** Hexadecimal a binario
   1. A1 es 1010 0001 <-- Conversión: (2^3 + 2^1)  (2^0)
   2. AA es 1010 1010 <-- Conversión: (2^3 + 2^1)  (2^0)

   Recordamos la tabla de conversión donde 1 hexadecimal se puede representar con ~4 bits~,
   y que sumamos los múltiplos de 2 (lo podemos ver similar a un polinomio de grado 3),
   donde en la suma multiplicamos por 1 sólo aquellos que nos interesa su valor,
   y el resto por cero.

   1111 = 2^3 + 2^2 + 2^1 + 2^0 = 8+4+2+1 = F (15 en hexadecimal)

   |-------+-------+-------+-------|
   |  1000 |  0100 |  0010 | 0001  |
   |-------+-------+-------+-------|
   | 2^3=8 | 2^2=4 | 2^1=2 | 2^0=1 |
   |-------+-------+-------+-------|
*** Decimal a binario
    1. 3 es 001 <-- Conversión: 2^1 
    2. 9 es 101 <-- Conversión: 2^3 + 2^1 = 8 + 1
** Potencias de 2
   - El sistema de numeración binario (ó en base 2) se representa con *potencias de 2*
   - El exponente ~N~ de ~2^N~ representan los ~bits~ de información (max. longitud del valor que se puede generar)

     |-------+----------------------+--------------------------------------------------------------------|
     |       | Cant. de información | para representar X cantidad de valores distintos ó combinaciones   |
     |-------+----------------------+--------------------------------------------------------------------|
     | ~2^1~ | ~1 bit~              | ~2^1=2~ => 2 combinaciones para representar valores (0 y 1)        |
     | ~2^2~ | ~2 bits~             | ~2^2=4~ => 4 valores posibles (00, 01, 10, 11)                     |
     | ~2^3~ | ~3 bits~             | ~2^3=8~ => 8 valores posibles  (000, 001, 010, 100, 101, 110, 111) |
     |-------+----------------------+--------------------------------------------------------------------|

   #+BEGIN_QUOTE
   De ~2^10~ tenemos ~10 bits~ de información = 1024 Bytes (1024 combinaciones)
   Se necesitan ~10 bits~ para representar 1024 elementos distintos

   Otro ejemplo es ~2^8~ donde ~8 bits~ equivale a ~1 Byte~
   ~2^8~ necesitamos ~8 bits~ de información para representar 2^3 = 256 valores diferentes
   #+END_QUOTE

   #+BEGIN_QUOTE
   Los binarios 1000, 1100, 1001, 1010 equivalen a ~4 bits~
   
   Si tenemos el valor ~1111~ en binario equivale a ~4 bits~
   2^3*1 + 2^2*1 + 2^1*1 + 2^0*1 = 8 + 4 + 2 + 1 = ~15~ en Decimal, ~Fh~ e Hexadecimal
   
   Por tanto si tenemos el binario ~1000~
   equivale a ~8h~ en Hexadecimal porque (2^3*1 + 2^2*0 + 2^1*0 + 2^0*0 = 8 + 0 + 0 + 0 es 8)
   #+END_QUOTE
** Tamaño entre DL y DF
   - Puede pasar que la *dirección lógica* (DL) sea del mismo tamaño que la *dirección física* (DF)
     (/En este caso tenemos un proceso que ocupa tanto como el tamaño de la memoria principal/)
   - El tamaño es siempre ~DL <= DF~ (puede ser igual o menor)
** Segmentación
   - Para calcular la dirección física (DF): ~direccion_fisica = base + offset~
   - Para calcular el número de segmento: ~numero_segmento = Base / Limite~ (lo mismo aplica para paginación)
** [#A] Direccionamiento Logica y Fisica
   - Definir Dirección lógica: ~direccion_logica = numero_pagina | offset~
   - Definir la dirección física: ~direccion_fisica = numero_marco | offset~

   #+BEGIN_QUOTE
   El símbolo ~|~ se está usa como separador de bits entre el número_pagina/numero_marco con offset,
   siendo los primeros N bits de mayor peso los que indican el numero_pagina/numero_marco
   y los bits restantes el offset
   #+END_QUOTE
** Tamaño de Marco
   Si sabemos la cant. de marcos => Será la potencia de 2 que resulte en la cant. de marcos
   (/Ej. si la memoria física tiene 32 marcos => 2^5 = 32 => los marcos son de 5 bits/)
** Tamaño de Pagina
   Si sabemos el tamaño de página => Será la potencia de 2 que resulte en ese tamaño
   (/Ej. si el tamaño de página es 1Kib => 1Kib=10 bits porque 2^10bits=1024 bytes/)

   #+BEGIN_COMMENT
   #+END_COMMENT
   
   *Observación:*
   Si sabemos el tamaño del marco => ~tamanio_pagina = tamanio_marco~
** Tamaño de Memoria fisica
   Si sabemos la cant de marcos => Será la cant. de marcos * tamaño de marco (ó de página)
   (/Ej. si la ram tiene 32 marcos, y c/página es de 1Kib => 32*KiB=32Kib=>2^15bits => memoria=15bits/)
* Observaciones
  #+BEGIN_COMMENT
  DL = num_pagina | offset
  DF = num_marco | offset
  
  - ~DF = Base + DL~
  - ~DL = Base + Offset~
  - ~DL <= DF~
  - ~numero_pagina = DL/tamanio_pagina~ => ~DL = numero_pagina * tamanio_pagina~
  - ~DF = numero_marco * tamanio_marco + offset~
  #+END_COMMENT
* Escenarios Comunes
** Obtener número de página de una DL
*** Datos
    - Tamaño Pagina = 1 KiB (1 KiB = 2^10 Bytes = 1024 Bytes)
    - Dirección Lógica = 2045 (en decimal)

    Tabla de paginas del Proceso (A)
    |--------+-------+---|
    | Página | Marco | V |
    |--------+-------+---|
    |      0 | 5     | 1 |
    |      1 | 6     | 1 |
    |      2 | 2     | 1 |
    |      3 | -     | 0 |
    |      4 | -     | 0 |
    |      5 | -     | 0 |
    |--------+-------+---|
*** Fórmulas útiles
    - ~DL = numero_pagina * tamaño_pagina~
      - numero_pagina = DL / tamaño_pagina
      - offset_pagina = DL % tamaño_pagina (obtenemos el resto de la división)
    - ~DF = numero_frame * tamaño_frame + offset_pagina~
    #+END_QUOTE
*** Solución 1 - En Decimal
    - Si nos dan la DL en decimal
    - Si sabemos la *DL* y el *tamaño_página* => obtenemos el *numero_pagina* del cociente de su división
    - Si sabemos la *DL* y el *tamaño_página* => obtenemos el *offset_pagina* del resto de su división
    - El *offset* sólo nos sirve para la traducción para obtener la *DF* (dirección física)
      
    #+BEGIN_QUOTE
    Si tamaño_pagina = 1Kib y DL = 2045 (en decimal)

    1) Para obtener el *número de página* usamos la fórmula ~DL=num_pagina*tamaño_pagina~
    2045 = numero_pagina * 1024 => numero_pagina = 2045/1024 => numero_pagina = 1,...
    por tanto ~numero_pagina = 1~ (en decimal)

    2) Para obtener el *offset* obtenemos el resto de la división anterior
    offset = 2045 % 1024 => offset = 1021
    por tanto ~offset = 1021~ (en decimal)

    3) Obtenemos el *número de marco* de la TP del Proceso A, usando el *número de página*
    la *página 1* está en el *frame 6*
    por tanto ~frame=6~ (en decimal)
       
    4) Para obtener la *dirección física* usamos la fórmula ~DF = numero_frame * tamaño_pagina + offset~
    DF = 6 * 1024 + 1021 => DF = 7165
    por tanto ~DF = 7165~ (en decimal)

    Este último paso, el de obtener la *DF* se conoce como *traducción*
    porque a partir de una *dirección lógica* obtenemos la *dirección física*
    y ésta última la que entiende la RAM
    #+END_QUOTE
*** Solución 2 - DL En Binario (bits)
    - Si nos dan la DL en hexadecimal ó decimal, la podemos pasar a binario
    - Usamos la fórmula de ~DL = numero_pagina (en bits) | offset (en bits)~
    - Si sabemos el *tamaño_pagina* => sabemos cuantos de los ultimos ~bits~ de la DL representan el *offset*
    
    #+BEGIN_QUOTE
    1) Obtenemos el *offset* de la página, a partir del *tamaño de página*
    tamaño_pagina = 1KiB = 2^10 Bytes = 1024 Bytes => necesitamos ~10 bits~ para direccionar dentro de la página (1024 combinaciones diferentes)
    por tanto ~offset=10 bits~

    2) Pasamos la DL de decimal a binario
       - los últimos ~10 bits~ son de *offset*
       - los bits antes del offset (al principio de la DL) serán del *número de página*

    2045 (decimal) = 11111111101 (binario) <- tiene 11 bits

    3) Separamos los bits de la DL usando ~DL = numero_pagina (bits) | offset_pagina (bits)~
    Como sabemos que el offset son ~10 bits~ los últimos 10 bits seran esos,
    DL = numero_pagina (1 bit) | offset (10 bits) => ~1|1111111101~
    por tanto ~numero_pagina = 1~

    (al primer bit ~1~ lo rellenamos con ceros, quedando 001 de binario que en Decimal es 1)

    4) Obtenemos el *número de marco* de la TP del Proceso A, usando el *numero de página*
    la *página 1* está en el *frame 6*
    como estamos usando con la fórmula en binario con bits ~DL = num_pagina | offset~
    convertimos el frame a binario 6 (decimal) = 0110 (en binario)
    por tanto ~frame=0110~ (en binario)

    5) Para obtener la *dirección física* usamos ~DF = numero_marco | offset_pagina~
    por tanto ~DF = 110 | 1111111101~
    #+END_QUOTE
** TLB y Paginación Jerárquica
*** Datos
    - DL = 114444h (en hexa)
    - 16 bits para offset (offset dentro de pagina)
    - 8 bits para numero_pagina
      - 4 bits para TP de 1º Nivel
      - 4 bits para TP de 2º Nivel

    TP Global
    |--------+-------|
    | pagina | frame |
    |--------+-------|
    |      0 |    50 |
    |    ~1~ |    51 |
    |      2 |    52 |
    |--------+-------|

    TP que apunta frame=51
    |--------+-------|
    | pagina | frame |
    |--------+-------|
    |      0 |    20 |
    |    ~1~ |   100 |
    |      2 |     2 |
    |--------+-------|

    TP que apunta frame=50
    |--------+-------|
    | pagina | frame |
    |--------+-------|
    |      0 |     5 |
    |      1 |    10 |
    |      2 |    22 |
    |--------+-------|

*** Solución 1
    #+BEGIN_QUOTE
    1) Obtenemos de ~DL = 114444h~ el numero_pagina de la TP global, y luego de otra
    Si DL = numero_pagina (8bits) | offset_pagina (16 bits) <- la cant. de bits es dato
    por tanto ~numero_pagina_completa = 11h~ (los primeros 8 bits de la DL, un hexadecimal son 4 bits)

    y dividimos el *numero de pagina* porque son 4 bits para una TP, y 4 para a la otra TP
    ~numero_pagina_TP_global = 1h~ (la TP de 1º nivel) <- el frame de esta, nos llevará a la de 2do nivel
    ~numero_pagina_TP = 1h~ (la TP de 2º nivel) <- esta tendrá el frame posta    

    1) Accedemos a la TP Global con numero_pagina=1, nos lleva al ~frame=51~
       
    2) Accedemos a la TP del frame=51, con numero_pagina=1, nos indica que el frame posta es ~frame=100~

    3) Cargamos en la TLB la página y el frame
       - ~numero_pagina=11h~ (es la página completa)
       - ~frame=100d~ (es dato de la TP de 2º nivel)

    TLB
    |--------+--------+---------|
    | pagina |  frame | proceso |
    |--------+--------+---------|
    | 11(h)  | 100(d) | PA      |
    |--------+--------+---------|

    Cada vez que accedamos a la TLB nos llevará con un acceso a memoria (frame=100, pagina=11)

    Si tuvieramos *paginación jerárquica* sin una TLB, tendríamos 2 accesos a memoria (a dos TP)
    porque accede a la TP Global y luego a la otra TP..
    
    Este esquema de paginación "jerárquica" divide una TP grande en varias chicas,
    donde una TP tiene una parte del numero de pagina (que el frame asignado nos lleva a otra TP)
    y la otra TP tiene la otra parte del numero de pagina
    osea ~pagina_completa = pag_tp_1erNivel | pag_tp_2doNivel~
    #+END_QUOTE
